name: default

on: push

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: "1.18"
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.45.2
  tests:
    runs-on: ubuntu-latest
    name: tests
    env:
      SCALR_TOKEN: ${{ secrets.SCALR_TOKEN }}
      UPSTREAM_ID: ${{ github.run_number }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: "1.18"
      - name: Set API_BRANCH
        run: echo "API_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
      - name: Check if same branch exists in fatmouse repository
        id: check-branch
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const owner = "Scalr";
            const repo = "fatmouse";
            const targetBranch = "${{ env.API_BRANCH }}";
            const default_branch = "master";
  
            try {
              const { data: branch } = await github.request('GET /repos/{owner}/{repo}/branches/{branch}', {
                owner: owner,
                repo: repo,
                branch: targetBranch
              });
  
              console.log(`Branch found in the ${repo} repository: ${branch.name}`);
              core.setOutput('branch', branch.name);
            } catch (error) {
              if (error.status === 404) {
                console.log(`Branch not found in ${repo} repository.`);
                core.setOutput('branch', default_branch);
              } else {
                console.error('Unexpected error:', error);
                core.setFailed('Unexpected error');
              }
            }
      - name: Clone fatmouse repo
        uses: actions/checkout@v3
        with:
          repository: Scalr/fatmouse
          path: fatmouse
          ref: ${{ steps.check-branch.outputs.branch }}
          token: ${{ secrets.GH_PAT }}
      - name: Set DB_BRANCH
        if: ${{ contains(github.event.head_commit.message, '[DB_BRANCH]') }}
        run: echo "DB_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
      - id: auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
      - name: Copy secrets
        shell: bash
        run: |
          mkdir ~/.scalr-labs
          gsutil cp gs://drone_bucket/prod/private.d/.secrets.yaml fatmouse/tacobell/.secrets.yaml
          gsutil cp gs://drone_bucket/prod/private.d/github.json ~/.scalr-labs/github.json
      - name: Configure docker
        shell: bash
        run: gcloud auth configure-docker eu.gcr.io
      - name: Pull python builder
        shell: bash
        run: |
          echo "::group::Pull python builder image"
          docker pull eu.gcr.io/development-156220/fatmouse/python-builder:master
          docker tag eu.gcr.io/development-156220/fatmouse/python-builder:master fatmouse/python-builder:master
          echo "::endgroup::"
      - name: Get current job log URL
        uses: Tiryoh/gha-jobid-action@v0
        id: get-job-id
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          job_name: ${{ github.job }}
      - name: Generate run tag
        shell: bash
        run: |
          if [ ${{ github.run_attempt }} = 1 ]; then
            RERUN_SUFFIX=""
          else
            RERUN_SUFFIX=$(echo -${{ github.run_attempt }})
          fi
          echo "RUN_TAG=e2e-${{ github.workflow }}-${{ github.job }}-${{ github.run_number }}${RERUN_SUFFIX}" >> $GITHUB_ENV
      - name: Create container
        id: create
        shell: bash
        run: |
          docker run --rm \
          -e GITHUB_WORKSPACE=true \
          -e GITHUB_OUTPUT=/fatmouse/output \
          -w /fatmouse \
          -v $PWD/fatmouse:/fatmouse \
          -v $GITHUB_OUTPUT:/fatmouse/output \
          -v ~/.scalr-labs:/etc/scalr-labs \
          fatmouse/python-builder:master python -u clickfile.py te up \
          --branch ${{ env.API_BRANCH }} \
          --run-url ${{ steps.get-job-id.outputs.html_url }} \
          --skip-ui-build \
          --cpu=1 \
          --ram=2G \
          ${{ env.RUN_TAG }}
      - name: Get Scalr hostname
        shell: bash
        run: |
          SCALR_HOST=${{ steps.create.outputs.host }}
          echo "SCALR_ADDRESS=https://mainiacp.${SCALR_HOST/https:\/\//}" >> $GITHUB_ENV
      - name: Run tests
        env:
          SCALR_ADDRESS: ${{ env.SCALR_ADDRESS }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TEST_AWS_ACCESS_KEY: ${{ secrets.TEST_AWS_ACCESS_KEY }}
          TEST_AWS_SECRET_KEY: ${{ secrets.TEST_AWS_SECRET_KEY }}
          TEST_AWS_ROLE_ARN: ${{ secrets.TEST_AWS_ROLE_ARN }}
          TEST_AWS_EXTERNAL_ID: ${{ secrets.TEST_AWS_EXTERNAL_ID }}
          TEST_ARM_CLIENT_ID: ${{ secrets.TEST_ARM_CLIENT_ID }}
          TEST_ARM_CLIENT_SECRET: ${{ secrets.TEST_ARM_CLIENT_SECRET }}
          TEST_ARM_TENANT_ID: ${{ secrets.TEST_ARM_TENANT_ID }}
          TEST_ARM_SUBSCRIPTION_ID: ${{ secrets.TEST_ARM_SUBSCRIPTION_ID }}
        run: make test
      - name: Install goveralls
        env:
          GO111MODULE: off
        run: go get github.com/mattn/goveralls
      - name: Send coverage
        env:
          COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: goveralls -coverprofile=covprofile -service=github
      - name: Delete container
        id: delete
        if: ${{ always() }}
        shell: bash
        run: |
          docker run --rm \
          -w /fatmouse \
          -v $PWD/fatmouse:/fatmouse \
          -v ~/.scalr-labs:/etc/scalr-labs \
          fatmouse/python-builder:master \
          python -u clickfile.py te rm \
          --no-wait ${{ env.RUN_TAG }}
