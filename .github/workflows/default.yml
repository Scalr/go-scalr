name: default

on: push

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: "1.18"
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.45.2
  tests:
    name: Tests
    runs-on: ubuntu-latest
    env:
      SCALR_TOKEN: ${{ secrets.SCALR_TOKEN }}
      UPSTREAM_ID: ${{ github.run_number }}
    steps:
      - name: Sudo GitHub Token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{vars.SUDO_GHA_APP_ID}}
          installation_id: ${{vars.SUDO_GHA_APP_INSTALLATION_ID}}
          private_key: ${{secrets.SUDO_GHA_APP_PRIVATE_KEY}}

      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: "1.18"

      - name: Set API_BRANCH
        run: echo "API_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Check if Same Branch Exists in Fatmouse Repository
        id: check-branch
        uses: actions/github-script@v7
        with:
          github-token: ${{steps.generate_token.outputs.token}}
          script: |
            const owner = "Scalr";
            const repo = "fatmouse";
            const targetBranch = "${{ env.API_BRANCH }}";
            const default_branch = "master";
  
            try {
              const { data: branch } = await github.request('GET /repos/{owner}/{repo}/branches/{branch}', {
                owner: owner,
                repo: repo,
                branch: targetBranch
              });
  
              console.log(`Branch found in the ${repo} repository: ${branch.name}`);
              core.setOutput('branch', branch.name);
            } catch (error) {
              if (error.status === 404) {
                console.log(`Branch not found in ${repo} repository.`);
                core.setOutput('branch', default_branch);
              } else {
                console.error('Unexpected error:', error);
                core.setFailed('Unexpected error');
              }
            }

      - name: Clone Fatmouse Repository
        uses: actions/checkout@v4
        with:
          repository: Scalr/fatmouse
          path: fatmouse
          ref: ${{ steps.check-branch.outputs.branch }}
          token: ${{steps.generate_token.outputs.token}}

      - name: Set DB_BRANCH
        if: ${{ contains(github.event.head_commit.message, '[DB_BRANCH]') }}
        run: echo "DB_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Copy Secrets
        shell: bash
        run: |
          mkdir ~/.scalr-labs
          gsutil cp gs://tacobell-secrets/.secrets.yaml fatmouse/tacobell/.secrets.yaml
          gsutil cp gs://tacobell-secrets/github.json ~/.scalr-labs/github.json

      - name: Configure Docker
        shell: bash
        run: gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Pull Python Builder
        shell: bash
        run: |
          echo "::group::Pull python builder image"
          builder_path=us-central1-docker.pkg.dev/scalr-dev/main-docker/fatmouse/python-builder
          exists=$(docker manifest inspect $builder_path:${{ github.ref_name }} > /dev/null ; echo $?)
          if [[ $exists == "0" ]]; then
            docker pull $builder_path:${{ github.ref_name }}
            docker tag $builder_path:${{ github.ref_name }} fatmouse/python-builder:base
          else
            docker pull $builder_path:master
            docker tag $builder_path:master fatmouse/python-builder:base
          fi
          echo "::endgroup::"

      - name: Get current job log URL
        uses: Tiryoh/gha-jobid-action@v1
        id: get-job-id
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          job_name: ${{ github.job }}

      - name: Generate Run Tag
        shell: bash
        run: |
          if [ ${{ github.run_attempt }} = 1 ]; then
            RERUN_SUFFIX=""
          else
            RERUN_SUFFIX=$(echo -${{ github.run_attempt }})
          fi
          echo "RUN_TAG=e2e-${{ github.workflow }}-${{ github.job }}-${{ github.run_number }}${RERUN_SUFFIX}" >> $GITHUB_ENV

      - name: Create Container
        id: create
        shell: bash
        run: |
          docker run --rm \
          -e GITHUB_WORKSPACE=true \
          -e GITHUB_OUTPUT=/fatmouse/output \
          -e GITHUB_STEP_SUMMARY=/fatmouse/step_summary \
          -w /fatmouse \
          -v $PWD/fatmouse:/fatmouse \
          -v $GITHUB_OUTPUT:/fatmouse/output \
          -v $GITHUB_STEP_SUMMARY:/fatmouse/step_summary \
          -v ~/.scalr-labs:/etc/scalr-labs \
          fatmouse/python-builder:base python -u clickfile.py te up \
          --branch ${{ env.API_BRANCH }} \
          --run-url ${{ steps.get-job-id.outputs.html_url }} \
          --skip-ui-build \
          --ignore-missing-branches \
          --agent-pool-id="${{vars.TACO_APOOL_ID}}" \
          ${{ env.RUN_TAG }}

      - name: Get Scalr Hostname
        shell: bash
        run: |
          SCALR_HOST=${{ steps.create.outputs.host }}
          echo "SCALR_ADDRESS=https://mainiacp.${SCALR_HOST/https:\/\//}" >> $GITHUB_ENV

      - name: Run Tests
        env:
          SCALR_ADDRESS: ${{ env.SCALR_ADDRESS }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TEST_AWS_ACCESS_KEY: ${{ secrets.TEST_AWS_ACCESS_KEY }}
          TEST_AWS_SECRET_KEY: ${{ secrets.TEST_AWS_SECRET_KEY }}
          TEST_AWS_ROLE_ARN: ${{ secrets.TEST_AWS_ROLE_ARN }}
          TEST_AWS_EXTERNAL_ID: ${{ secrets.TEST_AWS_EXTERNAL_ID }}
          TEST_ARM_CLIENT_ID: ${{ secrets.TEST_ARM_CLIENT_ID }}
          TEST_ARM_CLIENT_SECRET: ${{ secrets.TEST_ARM_CLIENT_SECRET }}
          TEST_ARM_TENANT_ID: ${{ secrets.TEST_ARM_TENANT_ID }}
          TEST_ARM_SUBSCRIPTION_ID: ${{ secrets.TEST_ARM_SUBSCRIPTION_ID }}
        run: make test

      - name: Install goveralls
        env:
          GO111MODULE: off
        run: go get github.com/mattn/goveralls

      - name: Send Coverage
        env:
          COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: goveralls -coverprofile=covprofile -service=github

      - name: Delete Container
        id: delete
        if: ${{ always() }}
        shell: bash
        run: |
          docker run --rm \
          -w /fatmouse \
          -v $PWD/fatmouse:/fatmouse \
          -v ~/.scalr-labs:/etc/scalr-labs \
          fatmouse/python-builder:base \
          python -u clickfile.py te rm \
          --no-wait ${{ env.RUN_TAG }}
